package main

import (
	"bytes"
	"encoding/json"
	"io"
	"net/http"
	"strconv"

	"github.com/maxence-charriere/go-app/v9/docs/src/vectartacomponents"
	"github.com/maxence-charriere/go-app/v9/pkg/app"
)

// SearchResult represents a single search result.
type SearchResult struct {
	Text          string  `json:"text"`
	DocumentIndex int     `json:"documentIndex"`
	Score         float64 `json:"score"`
}

// Document represents a single document.
type Document struct {
	ID       string `json:"id"`
	Metadata []struct {
		Name  string `json:"name"`
		Value string `json:"value"`
	} `json:"metadata"`
}

// ResponseData represents the response data from the API.
type ResponseData struct {
	ResponseSet []struct {
		Response []SearchResult `json:"response"`
		Document []Document     `json:"document"`
		Summary  []struct {
			Text string `json:"text"`
		} `json:"summary"`
	} `json:"responseSet"`
	Status  []interface{} `json:"status"`
	Metrics interface{}   `json:"metrics"`
}

// SearchComponent represents the search component.
type SearchComponent struct {
	app.Compo

	InputValue    string
	SummaryText   string
	SearchResults []SearchResult
	Documents     []Document
}

// OnInputChange handles input value changes.
func (s *SearchComponent) OnInputChange(ctx app.Context, e app.Event) {
	s.InputValue = ctx.JSSrc().Get("value").String()
}

// OnSubmitClick handles submit button click.
func (s *SearchComponent) OnSubmitClick(ctx app.Context, e app.Event) {
	app.Log("Submitted query:", s.InputValue)

	url := "https://api.vectara.io/v1/query"
	method := "POST"

	query := s.InputValue

	payloadMap := map[string]interface{}{
		"query": []map[string]interface{}{
			{
				"query":        query,
				"queryContext": "",
				"start":        0,
				"numResults":   3,
				"contextConfig": map[string]interface{}{
					"charsBefore":     0,
					"charsAfter":      0,
					"sentencesBefore": 2,
					"sentencesAfter":  2,
				},
				"rerankingConfig": map[string]interface{}{
					"rerankerId": 272725718,
					"mmrConfig": map[string]interface{}{
						"diversityBias": 0,
					},
				},
				"corpusKey": []map[string]interface{}{
					{
						"customerId":     2523211369,
						"corpusId":       12,
						"semantics":      0,
						"metadataFilter": "",
						"lexicalInterpolationConfig": map[string]interface{}{
							"lambda": .025,
						},
						"dim": []interface{}{},
					},
				},
				"summary": []map[string]interface{}{
					{
						"maxSummarizedResults": 5,
						"responseLang":         "auto",
						"summarizerPromptName": "vectara-summary-ext-v1.2.0",
					},
				},
			},
		},
	}

	payloadJSON, err := mapToJSON(payloadMap)
	if err != nil {
		app.Log("Error converting payload to JSON:", err)
		return
	}

	payload := bytes.NewReader([]byte(payloadJSON))

	client := &http.Client{}
	req, err := http.NewRequest(method, url, payload)
	if err != nil {
		app.Log(err)
		return
	}

	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Accept", "application/json")
	req.Header.Add("x-api-key", "zwt_lmUmaZXsE_PkhRRjH7ryw8a9dNXYgDXtavC1cw")
	req.Header.Add("customer-id", "2523211369")

	res, err := client.Do(req)
	if err != nil {
		app.Log(err)
		return
	}
	defer res.Body.Close()

	body, err := io.ReadAll(res.Body)
	if err != nil {
		app.Log(err)
		return
	}

	app.Log("Response:", string(body))

	var responseData ResponseData
	if err := json.Unmarshal(body, &responseData); err != nil {
		app.Log("Error unmarshalling JSON:", err)
		return
	}

	s.SummaryText = responseData.ResponseSet[0].Summary[0].Text
	s.SearchResults = responseData.ResponseSet[0].Response
	s.Documents = responseData.ResponseSet[0].Document
}

// Render renders the search component.
func (s *SearchComponent) Render() app.UI {
	return app.Div().Body(
		app.Label().For("queryInput").Text("Query:"),
		app.Input().
			Type("text").
			ID("queryInput").
			Value(s.InputValue).
			OnChange(s.OnInputChange),
		app.Button().
			Text("Submit").
			OnClick(s.OnSubmitClick),
		vectartacomponents.NewSummaryComponent(s.SummaryText),
		app.Div().Class("searchresults").Body(
			app.Range(s.SearchResults).Slice(func(i int) app.UI {
				sresponse := s.SearchResults[i]
				return app.Li().Text(strconv.Itoa(int(sresponse.DocumentIndex)) + ": " + sresponse.Text)
			}),
			app.Div().Class("documents").Body(
				app.Range(s.Documents).Slice(func(i int) app.UI {
					sdoc := s.Documents[i]
					return app.Li().Text(sdoc.Metadata)
				}),
			),
		),
	)
}

// mapToJSON converts a map to a JSON string.
func mapToJSON(m map[string]interface{}) (string, error) {
	jsonBytes, err := json.Marshal(m)
	if err != nil {
		return "", err
	}
	return string(jsonBytes), nil
}

func newSearchPage() *SearchComponent {
	return &SearchComponent{SummaryText: ""}
}
